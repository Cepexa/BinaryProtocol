#ifndef BINARY_PROTOCOL_HPP
#define BINARY_PROTOCOL_HPP

#include <cstdint>
#include <vector>
#include <string>
#include <memory>
#include <cstring>

// –®–∞–±–ª–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤ –≤ –±–∞–π—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
template <typename T>
std::string to_bytes(T value) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø T —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, int, float, double)
    static_assert(std::is_trivially_copyable<T>::value, "T must be a trivially copyable type");

    // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –∏–∑ sizeof(T) –±–∞–π—Ç
    std::string bytes(sizeof(T), '\0');

    // –ö–æ–ø–∏—Ä—É–µ–º –±–∞–π—Ç—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
    memcpy(&bytes[0], &value, sizeof(T));

    return bytes;
}

// –®–∞–±–ª–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±–∞–π—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ
template <typename T>
T from_bytes(const std::string& bytes) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø T —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º—ã–º
    static_assert(std::is_trivially_copyable<T>::value, "T must be a trivially copyable type");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ä—É —Ç–∏–ø–∞ T
    if (bytes.size() != sizeof(T)) {
        throw std::invalid_argument("Invalid byte string size for type T");
    }

    T value;
    memcpy(&value, bytes.data(), sizeof(T)); // –ö–æ–ø–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –∑–Ω–∞—á–µ–Ω–∏–µ
    return value;
}

namespace BinaryProtocol {

// üìå –ö–æ–¥ –∫–æ–º–∞–Ω–¥
enum CommandType : uint8_t {
    ERROR = 0x00,
    OK = 0x01,
    SQL = 0x02,
    EMPTY = 0x03,
    PING = 0xFF,
};

// üìå SQL –¢—ç–≥–∏ 
enum SQL_Tags : uint8_t {
    SELECT = 0x01,
    INSERT = 0x02,
    UPDATE = 0x03,
    DELETE,
    FROM,
    SET,
    WHERE,
    VALUES,
    JOIN,
    ON,
    ORDER_BY,
    DESC,
    AS,
    GROUP_BY
};

// üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–∞
#pragma pack(push, 1)
struct PacketHeader {
    uint16_t magic = 0xABCD;   // –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞
    uint8_t version = 1;       // –í–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    uint8_t command;           // –ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã
    uint32_t request_id;       // ID –∑–∞–ø–∏—Å–∏
    uint32_t payload_size;     // –†–∞–∑–º–µ—Ä –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
};
#pragma pack(pop)

struct PacketBase {
    PacketHeader header;
    std::string payload;
    PacketBase(CommandType cmd, uint32_t req_id,const std::string& payload = {});
    std::vector<uint8_t> toBinary() const;
    static PacketBase fromBinary(const std::vector<uint8_t>& raw);
};

// üìå –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–∞–∫–µ—Ç
struct PacketRequest : PacketBase{
    PacketRequest(CommandType cmd, uint32_t req_id,const std::string& payload = {});
    static PacketRequest fromBinary(const std::vector<uint8_t>& raw);
    void addData(SQL_Tags tag, const std::string& data);
    void addData(const std::string& data_bytes);
    std::string getQuery();
};

struct PacketResponse : PacketBase{
    PacketResponse(CommandType cmd, uint32_t req_id,const std::string& payload = {});
    std::vector<uint8_t> toBinary();
    static PacketResponse fromBinary(const std::vector<uint8_t>& raw);
    void addNameValue(const std::string& name, const std::string& value);
    void addNameValue(const std::string& name, const char* value);
};

// üìå –£—Ç–∏–ª–∏—Ç—ã —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
namespace Serializer {
    std::vector<uint8_t> encodeString(const std::string& str);
    std::string decodeString(const std::vector<uint8_t>& data);
    std::vector<uint8_t> encodeInt(int32_t value);
    int32_t decodeInt(const std::vector<uint8_t>& data);
}

} // namespace BinaryProtocol

#endif // BINARY_PROTOCOL_HPP
